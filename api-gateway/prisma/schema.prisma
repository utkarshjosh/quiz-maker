// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management Tables
model User {
  id              String    @id @default(uuid()) @db.Uuid
  email           String    @unique @db.VarChar(255)
  username        String    @unique @db.VarChar(100)
  passwordHash    String    @map("password_hash") @db.VarChar(255)
  emailVerified   Boolean   @default(false) @map("email_verified")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  lastLogin       DateTime? @map("last_login")
  profileData     Json      @default("{}") @map("profile_data")

  // Relations
  sessions        UserSession[]
  quizzes         Quiz[]
  threads         Thread[]
  hostingSessions HostingSession[]
  participations  SessionParticipant[]

  @@map("users")
}

model UserSession {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  refreshToken String   @unique @map("refresh_token") @db.VarChar(500)
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  lastUsed     DateTime @default(now()) @map("last_used")
  deviceInfo   Json     @default("{}") @map("device_info")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// Tag Management
model Tag {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(100)
  slug        String   @db.VarChar(100)
  isPrimary   Boolean  @default(false) @map("is_primary")
  icon        String?  @db.VarChar(50)
  color       String?  @db.VarChar(50)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  quizzes QuizTag[]

  @@unique([name, isPrimary])
  @@unique([slug, isPrimary])
  @@map("tags")
}

// Quiz Management Tables
model Quiz {
  id               String      @id @default(uuid()) @db.Uuid
  userId           String      @map("user_id") @db.Uuid
  title            String      @db.VarChar(255)
  description      String?     @db.Text
  difficulty       String      @default("medium") @db.VarChar(50)
  timeLimit        Int         @default(1800) @map("time_limit") // seconds
  totalQuestions   Int         @map("total_questions")
  quizData         Json        @map("quiz_data") // Full quiz content
  status           String      @default("draft") @db.VarChar(50) // draft, published, archived
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")
  publishedAt      DateTime?   @map("published_at")
  version          Int         @default(1)

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  versions        QuizVersion[]
  threads         Thread[]
  hostingSessions HostingSession[]
  tags            QuizTag[]

  @@map("quizzes")
}

// Quiz-Tag relationship
model QuizTag {
  quizId    String   @map("quiz_id") @db.Uuid
  tagId     String   @map("tag_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([quizId, tagId])
  @@map("quiz_tags")
}

model QuizVersion {
  id             String   @id @default(uuid()) @db.Uuid
  quizId         String   @map("quiz_id") @db.Uuid
  version        Int
  quizData       Json     @map("quiz_data")
  changeSummary  String?  @map("change_summary") @db.Text
  createdAt      DateTime @default(now()) @map("created_at")
  createdBy      String   @map("created_by") @db.Uuid

  // Relations
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_versions")
}

// Thread Management Tables
model Thread {
  id             String    @id @default(uuid()) @db.Uuid
  userId         String    @map("user_id") @db.Uuid
  redisThreadId  String?   @map("redis_thread_id") @db.VarChar(100) // Link to Redis thread
  title          String?   @db.VarChar(255)
  status         String    @default("active") @db.VarChar(50) // active, completed, archived
  quizId         String?   @map("quiz_id") @db.Uuid
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  expiresAt      DateTime? @map("expires_at")
  contextData    Json      @default("{}") @map("context_data")

  // Relations
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz     Quiz?           @relation(fields: [quizId], references: [id], onDelete: SetNull)
  messages ThreadMessage[]

  @@map("threads")
}

model ThreadMessage {
  id             String   @id @default(uuid()) @db.Uuid
  threadId       String   @map("thread_id") @db.Uuid
  role           String   @db.VarChar(50) // 'user', 'assistant', 'system'
  content        String   @db.Text
  metadata       Json     @default("{}")
  createdAt      DateTime @default(now()) @map("created_at")
  sequenceNumber Int      @map("sequence_number")

  // Relations
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@map("thread_messages")
}

// Hosting & Participation Tables
model HostingSession {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  quizId          String   @map("quiz_id") @db.Uuid
  sessionCode     String   @unique @map("session_code") @db.VarChar(20)
  title           String   @db.VarChar(255)
  maxParticipants Int      @default(50) @map("max_participants")
  status          String   @default("created") @db.VarChar(50) // created, active, ended
  settings        Json     @default("{}") // Additional settings
  createdAt       DateTime @default(now()) @map("created_at")
  startedAt       DateTime? @map("started_at")
  endedAt         DateTime? @map("ended_at")

  // Relations
  user         User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz         Quiz                   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  participants SessionParticipant[]
  results      SessionResult[]

  @@map("hosting_sessions")
}

model SessionParticipant {
  id        String    @id @default(uuid()) @db.Uuid
  sessionId String    @map("session_id") @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  nickname  String    @db.VarChar(100)
  joinedAt  DateTime  @default(now()) @map("joined_at")
  leftAt    DateTime? @map("left_at")
  status    String    @default("joined") @db.VarChar(50) // joined, active, completed, left

  // Relations
  session HostingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  results SessionResult[]

  @@map("session_participants")
}

model SessionResult {
  id               String   @id @default(uuid()) @db.Uuid
  sessionId        String   @map("session_id") @db.Uuid
  participantId    String   @map("participant_id") @db.Uuid
  questionNumber   Int      @map("question_number")
  userAnswer       String?  @map("user_answer") @db.Text
  correctAnswer    String   @map("correct_answer") @db.Text
  isCorrect        Boolean  @map("is_correct")
  timeTaken        Int?     @map("time_taken") // milliseconds
  pointsEarned     Int      @default(0) @map("points_earned")
  answeredAt       DateTime @default(now()) @map("answered_at")

  // Relations
  session     HostingSession     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  participant SessionParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@map("session_results")
}
